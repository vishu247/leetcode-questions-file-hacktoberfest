import java.util.ArrayList;
import java.util.List;

public class LC207CourseSchedule {
    public static void main(String[] args) {

        LC207CourseSchedule obj=new LC207CourseSchedule();
        int numCourses=2;
        int[][] prerequisites=new int[][]{{1,0}};
        System.out.println(obj.canFinish(numCourses,prerequisites));
    }//sample main function

        public boolean canFinish(int numCourses, int[][] prerequisites) {
            int[] v=new int[numCourses];
            int[] path=new int[numCourses];
            List<List<Integer>> list=new ArrayList<>();

            for (int i = 0; i < numCourses; i++) {
                list.add(new ArrayList<>());
            }
            for(int i=0;i<prerequisites.length;i++){
                int a=prerequisites[i][1];
                int b=prerequisites[i][0];
                list.get(a).add(b);
            }
            for(int i=0;i<numCourses;i++){
                if(v[i]==0){
                    if(dfs(i,list,v,path)==true){
                        return false;
                    }
                }
            }
            return true;
        }

        public boolean dfs(int node,List<List<Integer>> list,int[] v,int[] path){
            v[node]=1;
            path[node]=1;
            List<Integer> l=list.get(node);
            for(int i=0;i<l.size();i++){
                int a=l.get(i);
                if(v[a]==0){
                    if(dfs(a,list,v,path)==true){
                        return true;
                    }
                }

                else if(path[a]==1){
                    return true;
                }
            }
            path[node]=0;
            return false;


        }
    }

