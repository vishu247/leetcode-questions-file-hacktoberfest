import java.util.*;

//https://leetcode.com/problems/word-ladder/description/
//https://www.youtube.com/watch?v=9aU8H1k7vsM
//https://takeuforward.org/data-structure/word-ladder-using-bfs
//Time complexity O(N*M*26) N=number of words in wordlist M=length of each word
//Space complexity O(N)
//we will use bfs to find the shortest path from beginword to endword
//we will use a queue to perform bfs and a set to store the words in the wordlist
//we will start from the beginword and for each character in the word we will replace it with all possible characters from 'a' to 'z'
//if the new word is present in the set we will add it to the queue and remove it from the set
//we will also keep track of the level of bfs which will be the length of the shortest path
//if we reach the endword we will return the level
//if we exhaust the queue and do not find the endword we will return 0
//at the end return the distance array
public class LC127WordLadder {
    class Pair{
        String first;
        int second;
        Pair(String first,int second){
            this.first=first;
            this.second=second;

        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> w=new HashSet<String>();
        for(int i=0;i<wordList.size();i++){
            w.add(wordList.get(i));
        }
        Queue<Pair> q=new LinkedList<Pair>();
        int level=1;
        q.add(new Pair(beginWord,level));
        w.remove(beginWord);
        while(!q.isEmpty()){
            String str=q.peek().first;
            level=q.peek().second;
            q.remove();
            if(str.equals(endWord)) return level;
            for(int i=0;i<str.length();i++ ){
                for(char ch='a';ch<='z';ch++){
                    char rep[]=str.toCharArray();
                    rep[i]=ch;
                    String neww=new String(rep);
                    if(w.contains(neww)){
                        w.remove(neww);
                        q.add(new Pair(neww,level+1));
                    }
                }
            }
        }

        return 0;

    }

    public static void main(String[] args) {
        LC127WordLadder obj=new LC127WordLadder();
        String beginWord="hit";
        String endWord="cog";
        List<String> wordList=new ArrayList<>(Arrays.asList("hot","dot","dog","lot","log","cog"));
        int ans=obj.ladderLength(beginWord,endWord,wordList);
        System.out.println(ans);
    }
}
